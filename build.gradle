plugins {
    id "java-library"
    id "maven-publish"
    id "signing"
    id "net.raphimc.class-token-replacer" version "1.1.3"
}

base {
    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    compileJava.options.encoding = compileTestJava.options.encoding = javadoc.options.encoding = "UTF-8"

    group = project.maven_group ?: rootProject.maven_group
    archivesName = project.maven_name ?: rootProject.maven_name
    version = project.maven_version ?: rootProject.maven_version
}

configurations {
    testImplementation.extendsFrom compileOnly
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly "org.jetbrains:annotations:26.0.2"
    api "org.joml:joml:1.10.8"
    api "it.unimi.dsi:fastutil:8.5.15"
    api "org.slf4j:slf4j-api:2.0.16"
    api "net.lenni0451.commons:core:1.7.0"
    api "net.lenni0451.commons:logging:1.7.0"

    // LWJGL needs to be provided by the application using ThinGL
    compileOnly "org.lwjgl:lwjgl:3.3.3"
    compileOnly "org.lwjgl:lwjgl-glfw:3.3.3"
    compileOnly "org.lwjgl:lwjgl-opengl:3.3.3"
    compileOnly "org.lwjgl:lwjgl-stb:3.3.3"

    // Optional dependencies
    compileOnly "org.lwjgl:lwjgl-freetype:3.3.3"
    compileOnly "org.lwjgl:lwjgl-meshoptimizer:3.3.3"
    compileOnly "org.lwjgl:lwjgl-par:3.3.3"

    // Test dependencies
    ["natives-windows", "natives-windows-arm64", "natives-linux", "natives-linux-arm64", "natives-macos", "natives-macos-arm64"].each {
        testImplementation "org.lwjgl:lwjgl:3.3.3:$it"
        testImplementation "org.lwjgl:lwjgl-glfw:3.3.3:$it"
        testImplementation "org.lwjgl:lwjgl-opengl:3.3.3:$it"
        testImplementation "org.lwjgl:lwjgl-stb:3.3.3:$it"
        testImplementation "org.lwjgl:lwjgl-freetype:3.3.3:$it"
        testImplementation "org.lwjgl:lwjgl-meshoptimizer:3.3.3:$it"
        testImplementation "org.lwjgl:lwjgl-par:3.3.3:$it"
    }
}

sourceSets {
    main {
        classTokenReplacer {
            property("\${version}", project.version)
            property("\${impl_version}", "git-${project.name}-${project.version}:${project.latestCommitHash().get()}")
        }
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.name ?: rootProject.name}" }
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

publishing {
    repositories {
        maven {
            name = "reposilite"
            url = "https://maven.lenni0451.net/" + (project.maven_version.endsWith("SNAPSHOT") ? "snapshots" : "releases")

            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = project.maven_group
            artifactId = project.maven_name
            version = project.maven_version

            from components.java

            pom {
                name = "ThinGL"
                description = "Lightweight Java wrapper for many common OpenGL functions"
                url = "https://github.com/RaphiMC/ThinGL"
                licenses {
                    license {
                        name = "LGPL-3.0 License"
                        url = "https://github.com/RaphiMC/ThinGL/blob/main/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = "RK_01"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/RaphiMC/ThinGL.git"
                    developerConnection = "scm:git:ssh://github.com/RaphiMC/ThinGL.git"
                    url = "https://github.com/RaphiMC/ThinGL.git"
                }
            }
        }
    }
}

signing {
    setRequired(false)
    sign configurations.archives
    sign publishing.publications.maven
}

project.tasks.withType(PublishToMavenRepository).forEach {
    it.dependsOn(project.tasks.withType(Sign))
}

Provider<String> latestCommitHash() {
    return providers.exec {
        commandLine = ["git", "rev-parse", "--short", "HEAD"]
    }.standardOutput.getAsText().map(String::trim)
}
